{
    "swagger": "2.0",
    "info": {
      "description": "Middleware API Information",
      "version": "1.1.0",
      "title": "Middleware API",
      "contact": {
        "name": "JoHyunWoo",
        "email": "wlq7410@naver.com"
      }
    },
    "basePath": "/",
    "paths": {
      "/admin": {
        "post": {
          "description": "Register Admin",
          "tags": [
            "Admin"
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/admin/domain": {
        "post": {
          "description": "Register Domain",
          "tags": [
            "Admin"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "user",
              "description": "The user to create.",
              "schema": {
                "type": "object",
                "required": [
                  "domain",
                  "user"
                ],
                "properties": {
                  "domain": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "security": [
            {
              "APIKeyHeader": []
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/admin/ddo": {
        "post": {
          "description": "Use to invoke function",
          "tags": [
            "Admin"
          ],
          "parameters": [
            {
              "name": "args",
              "in": "body",
              "description": "Arguments of smart contract",
              "required": true,
              "schema": {
                "$ref": "#/definitions/DDo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        },
        "put": {
          "description": "Use to invoke function",
          "tags": [
            "Admin"
          ],
          "parameters": [
            {
              "name": "args",
              "in": "body",
              "description": "Arguments of smart contract",
              "required": true,
              "schema": {
                "type": "string",
                "format": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        },
        "delete": {
          "description": "Use to invoke function",
          "tags": [
            "Admin"
          ],
          "parameters": [
            {
              "name": "args",
              "in": "query",
              "description": "Arguments of smart contract",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/admin/vc": {
        "post": {
          "description": "Use to invoke function",
          "tags": [
            "Admin"
          ],
          "parameters": [
            {
              "name": "args",
              "in": "body",
              "description": "Arguments of smart contract",
              "required": true,
              "schema": {
                "$ref": "#/definitions/VC"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/user/test": {
        "get": {
          "description": "testing",
          "tags": [
            "User"
          ],
          "parameters": [
            {
              "name": "api_key",
              "in": "query",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Testing Success"
            }
          }
        }
      },
      "/user/ddo/{did}": {
        "get": {
          "description": "Query registered DDo",
          "tags": [
            "User"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "user",
              "required": true,
              "type": "string"
            },
            {
              "name": "domain",
              "in": "query",
              "description": "domain",
              "required": true,
              "type": "string"
            },
            {
              "name": "did",
              "in": "path",
              "description": "The Document of DID",
              "required": true,
              "type": "string"
            },
            {
              "name": "api_key",
              "in": "query",
              "description": "api key for api-umbrella",
              "required": true,
              "type": "string"
            }
          ],
          "security": [
            {
              "APIKeyHeader": []
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/user/vc/{did}": {
        "get": {
          "description": "Query registered VC",
          "tags": [
            "User"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "query",
              "description": "user",
              "required": true,
              "type": "string"
            },
            {
              "name": "domain",
              "in": "query",
              "description": "domain",
              "required": true,
              "type": "string"
            },
            {
              "name": "did",
              "in": "path",
              "description": "The Document of DID",
              "required": true,
              "type": "string"
            }
          ],
          "security": [
            {
              "APIKeyHeader": []
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/user/apikey": {
        "post": {
          "description": "Recover APIKey",
          "tags": [
            "User"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "user",
              "description": "The user to recover apikey",
              "schema": {
                "type": "object",
                "required": [
                  "domain",
                  "user",
                  "uuid"
                ],
                "properties": {
                  "domain": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "uuid": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A successful response"
            }
          }
        }
      },
      "/contacts": {
        "get": {
          "summary": "list contacts",
          "description": "returns a list of all the contacts",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "post": {
          "summary": "Add a new contact to the Contact",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Contact name that needs to be added to the Contacts",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Contact"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "405": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/contacts/{contact_id}": {
        "get": {
          "summary": "Find contact by ID",
          "description": "Returns a contact pet",
          "operationId": "getContactById",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "contact_id",
              "in": "path",
              "description": "ID of contact to return",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Contact not found"
            }
          }
        },
        "put": {
          "summary": "Update an existing contact",
          "description": "",
          "operationId": "updateContact",
          "consumes": [
            "application/json",
            "application/xml"
          ],
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "contact_id",
              "in": "path",
              "description": "ID of contact to update",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Contact object that needs to be added to the store",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Contact"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Contact not found"
            },
            "405": {
              "description": "Validation exception"
            }
          }
        },
        "delete": {
          "summary": "Deletes a contact",
          "description": "",
          "operationId": "deleteContact",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "contact_id",
              "in": "path",
              "description": "ID of contact to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Contact not found"
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Admin",
        "description": "관리자 관련 API"
      },
      {
        "name": "User",
        "description": "사용자 관련 API"
      }
    ],
    "securityDefinitions": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "apiKey"
      }
    },
    "definitions": {
      "Contact": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ]
          },
          "phone": {
            "type": "string",
            "description": "phone number for the contact"
          }
        },
        "xml": {
          "name": "Contact"
        }
      },
      "VC": {
        "type": "object",
        "required": [
          "key",
          "conDID",
          "claimDef",
          "sig"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for stateDB",
            "example": "sampleVC"
          },
          "conDID": {
            "type": "string",
            "description": "Controller DID",
            "example": "did:bob:controller"
          },
          "claimDef": {
            "type": "string",
            "description": "Definition of Claim",
            "example": "UnivCert"
          },
          "sig": {
            "type": "string",
            "description": "Signature",
            "example": "sssssssiiiiiiiiiiiggggggg"
          },
          "sigType": {
            "type": "string",
            "description": "Signature Type(Default - byoblHashSig)",
            "example": ""
          },
          "expired": {
            "type": "string",
            "description": "The date when is expired",
            "example": "2022-10-10T17:00:00Z"
          }
        }
      },
      "DDo": {
        "type": "object",
        "required": [
          "key",
          "pubkey"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for Identifier",
            "example": "sample"
          },
          "pubkey": {
            "type": "string",
            "description": "공개키",
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAikeNB9Q8cKN2fYFSn5Ty/GdpT6P4B5YP7E4uZybPojua3A7Vy24oeBXxRlAwU1b6hnsIvjC+JGuwsZqFActCNNaTt3T4SadOfcxZZSdlsqq+He/lOQK0qHxCL6A7MLT9/3nHCL6/LJ7RGQMGOEsaT8GHxWvvZfjlduyjTlli1u8ZXHu8RbcU7LnNNutbgqFfRpdyMJdbJwRL2sqSucj2M6ZOpvRH5Y5ISOa/+Is3wXIAkK9qFfdVvUU0n48KVGSNUcfT6nKgLfuMC7fyhH13iWqqYbL2loc+/Hmst1jlrryElTXwCBW7atMhirbgj4Q4PdZHUBrII9kHNilhYDIXNw== rsa-key-20201005"
          },
          "pubkeyType": {
            "type": "string",
            "description": "공개키 타입",
            "example": ""
          },
          "context": {
            "type": "string",
            "description": "Context Spec",
            "example": ""
          },
          "sType": {
            "type": "string",
            "description": "Service Type for Issuer",
            "example": ""
          },
          "sEndpoint": {
            "type": "string",
            "description": "Service Endpoint for Issuer",
            "example": ""
          }
        }
      }
    }
  }